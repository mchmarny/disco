package bq

import (
	"context"
	"time"

	"cloud.google.com/go/bigquery"
	"github.com/mchmarny/disco/pkg/types"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

func ImportVulnerabilities(ctx context.Context, req *types.ImportRequest) error {
	if req == nil || req.FilePath == "" {
		return errors.Errorf("configured import request is required: %v", req)
	}
	var report types.ItemReport[types.VulnerabilityReport]
	if err := types.UnmarshalFromFile(req.FilePath, &report); err != nil {
		return errors.Wrapf(err, "failed to unmarshal report from %s", req.FilePath)
	}

	rows := MakeVulnerabilityRows(report.Items)
	if err := insert(ctx, req, rows); err != nil {
		return errors.Wrap(err, "failed to insert rows")
	}

	log.Debug().Msgf("inserted %d rows into %s.%s.%s", len(rows), req.ProjectID, req.DatasetID, req.TableID)

	return nil
}

func MakeVulnerabilityRows(in []*types.VulnerabilityReport) []*VulnerabilityRow {
	list := make([]*VulnerabilityRow, 0)
	updated := time.Now().UTC().Format(time.RFC3339)
	batchID := time.Now().UTC().Unix()

	for _, r := range in {
		for _, v := range r.Vulnerabilities {
			list = append(list, &VulnerabilityRow{
				BatchID:        batchID,
				Image:          types.ParseImageNameFromDigest(r.Image),
				Sha:            types.ParseImageShaFromDigest(r.Image),
				CVE:            v.ID,
				Severity:       v.Severity,
				Package:        v.Package,
				PackageVersion: v.PackageVersion,
				Title:          v.Title,
				Description:    v.Description,
				URL:            v.URL,
				Updated:        updated,
			})
		}
	}

	return list
}

type VulnerabilityRow struct {
	BatchID        int64
	Image          string
	Sha            string
	CVE            string
	Severity       string
	Package        string
	PackageVersion string
	Title          string
	Description    string
	URL            string
	Updated        string
}

func (i *VulnerabilityRow) Save() (map[string]bigquery.Value, string, error) {
	return map[string]bigquery.Value{
		"batch_id":    i.BatchID,
		"image":       i.Image,
		"sha":         i.Sha,
		"cve":         i.CVE,
		"severity":    i.Severity,
		"package":     i.Package,
		"version":     i.PackageVersion,
		"title":       i.Title,
		"description": i.Description,
		"url":         i.URL,
		"updated":     i.Updated,
	}, "", nil
}
